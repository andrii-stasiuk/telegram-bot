import asyncio
import logging
from flask import Flask, request
from telegram import Update, ChatMember, ChatMemberUpdated
from telegram.constants import ChatType, ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes

import os

# === Logging ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Init ===
TOKEN = os.getenv("BOT_TOKEN")  # üîí –¥–æ–¥–∞–π —Å–≤—ñ–π —Ç–æ–∫–µ–Ω —É Render env vars
WEBHOOK_PATH = "/webhook"

app = Flask(__name__)
telegram_app = Application.builder().token(TOKEN).build()

# === Handlers ===
async def tag_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –≥—Ä—É–ø
    if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –≥—Ä—É–ø–∞—Ö.")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤ (–¥–æ 200 ‚Äî –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram API)
    try:
        members = []
        async for member in context.bot.get_chat_administrators(chat.id):
            if not member.user.is_bot:
                name = f"@{member.user.username}" if member.user.username else member.user.first_name
                members.append(name)

        if members:
            text = "üë• " + " ".join(members)
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

telegram_app.add_handler(CommandHandler("all", tag_all))


# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
def webhook():
    data = request.get_json(force=True)

    async def handle_update():
        if not telegram_app._initialized:
            await telegram_app.initialize()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)

    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.create_task(handle_update())
    return "OK"
