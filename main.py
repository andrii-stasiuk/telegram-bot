import os
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_id: set(user_id)}
user_ids = {}

# Flask App
app = Flask(__name__)
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –±—É–¥—å-—è–∫–æ–º—É —Ç–µ–∫—Å—Ç—ñ
async def save_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not chat or not user:
        print("‚ùå –ù–µ–º–∞—î —á–∞—Ç—É –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ update")
        return

    chat_id = chat.id
    user_id = user.id

    if chat_id not in user_ids:
        user_ids[chat_id] = set()
    user_ids[chat_id].add(user_id)

    print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ user_id {user_id} —É —á–∞—Ç—ñ {chat_id}")

# –¢–µ–≥–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥–æ—é /all
async def tag_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in user_ids or not user_ids[chat_id]:
        await update.message.reply_text("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    mentions = [f"[User](tg://user?id={uid})" for uid in user_ids[chat_id]]
    chunks = [mentions[i:i + 10] for i in range(0, len(mentions), 10)]

    for group in chunks:
        await update.message.reply_text(" ".join(group), parse_mode="Markdown")

# –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥ —É—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω—å
async def debug_all(update: Update, context: CallbackContext):
    print("üß© DEBUG UPDATE:", update.to_dict())

# –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_user))
telegram_app.add_handler(CommandHandler("all", tag_all))
telegram_app.add_handler(MessageHandler(filters.ALL, debug_all))  # –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

# Flask –≤–µ–±—Ö—É–∫
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

@app.route("/webhook", methods=["POST"])
def webhook():
    update_data = request.get_json(force=True)
    print("üì• RAW update from Telegram:", update_data)

    update = Update.de_json(update_data, telegram_app.bot)

    future = asyncio.run_coroutine_threadsafe(
        telegram_app.process_update(update),
        loop
    )

    try:
        future.result(timeout=10)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ update: {e}")

    return "OK"

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    loop.run_until_complete(telegram_app.bot.delete_webhook())
    loop.run_until_complete(telegram_app.bot.set_webhook(WEBHOOK_URL))
    print(f"üöÄ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
